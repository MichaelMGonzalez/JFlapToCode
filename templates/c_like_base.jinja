%- import "c_like_macros.jinja" as macros
{%- block macro_block %}
{%- endblock %}
{%- block libraries %}{% endblock %}
{% if namespace %} 
namespace {{namespace}} { 
{%endif%}
public {{class_prefix}} class {{ class_name }}{% block inheritance %}{% endblock %} {
    {%- for var in boolean_variables %}
    public bool {{var}};
    {%- endfor %}
	{%- block variables %} 
    protected float transitionedAt;
	{%- endblock %}
	{%- block extra_functions %}
    public float TimeInState()
    {
        return Time.time - transitionedAt;
    }
    protected {{class_prefix}} void OnTransition();
	{%- endblock %}
    
    public {{return_type}} Step()
    {
		State prevState = state;
        _Step();
        {% block end_of_tick %}
            if (prevState != state)
            {
                transitionedAt = Time.time;
                OnTransition();
            }
        {% endblock %}
    }
    public {{return_type}} MultiStep()
    {
        State prevState;
        do {
            prevState = state;
            _Step();
            if(prevState!=state) {
                transitionedAt = Time.time;
                OnTransition();
            }
        }
        while(prevState != state) ;
    }
    
    protected {{return_type}} _Step()
    {
		% if type == "mealy":
            // Get a uniform random number for MDP transitions
            float rand = UnityEngine.Random.value;
		% endif
        %- if any_state:
            // While in any state, follow these transitions
			%- if type == "mealy":
            {{macros.mdp_transition_structure( any_state.transitions, True)}}
			% endif
        %- endif
		{% block state_action %} 
                switch(state) {
                % for state in states:
                % if state.has_func:
                    case State.{{state.name}}:
                    % if state.func: 
                        Execute{{ state.func}}();
                    % else:
                        ExecuteAction{{ state.name }}();
                    % endif 
                        break;
                % endif 
                % endfor 
            }
		{%- endblock %}
        {%- block transition %}
        % if type == "mealy" 
        % include "Unity_MDP.jinja.cs" 
        % else 
        % include "Unity_HLSM.jinja.cs" 
        % endif 
		{% endblock %}
		
    }
    // State Logic Functions
    % for state in states:
    % if state.has_func and not state.func: 
    {{function_prefix}} {{class_prefix}}  {{return_type}} ExecuteAction{{state.name}}();
    % endif 
    % endfor 
    % for t in user_state_f:
    {{function_prefix}} {{class_prefix}} {{return_type}} Execute{{t}}();
    % endfor 
    // Transitional Logic Functions
    % for transition in transitions:
    % if transition and function_prefix: 
    {{function_prefix}} {{class_prefix}} bool {{transition}};
    % endif 
    % endfor 
    


    
    
  
}
{% if namespace %} 
}
{% endif %}
