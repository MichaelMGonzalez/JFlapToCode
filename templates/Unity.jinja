using UnityEngine;
using System.Collections;
public abstract class {{ class_name }}AbstractFSM : NPC, IStateMachine{
    protected float transitionedAt;
    public enum State { 
        {%- for state in states %}
        {{ state.name }} = {{state.id}}{% if not loop.last %},{%endif%}
        {%- endfor %}
    }  
    public State state = State.{{ init_state }};
    private IEnumerator FSMThread( float delayRate ) {
        while(true) {
            State prevState = state;
            // The following switch statement handles the state machine's action logic
            switch(state) {
                {%- for state in states %}
                {%- if state.has_func %}
                case State.{{state.name}}:
                    {%- if state.func %}
                    yield return Execute{{ state.func}}();
                    {%- else %}
                    yield return ExecuteAction{{ state.name }}();
                    {%- endif %}
                    break;
                {%- endif %}
                {%- endfor %}
            }
            {% if type == "mealy" %}
            {% include "Unity_MDP.jinja" %}
            {% else %}
            {% include "Unity_HLSM.jinja" %}
            {% endif %}
            
            yield return new WaitForSeconds( delayRate );
            if ( prevState!=state ) {
                transitionedAt = Time.time;
                OnTransition();
            }
        }
    }

    // State Logic Functions
    {%- for state in states %}
    {%- if state.has_func and not state.func %}
    protected abstract IEnumerator ExecuteAction{{state.name}}();
    {% endif %}
    {% endfor %}
    {%- for t in user_state_f %}
    protected abstract IEnumerator Execute{{t}}();
    {% endfor %}
    // Transitional Logic Functions
    {%- for transition in transitions %}
    {%- if transition %}
    protected abstract bool {{transition}}();
    {%- endif %}
    {% endfor %}
    public void RunFSM()
    {
        RunFSM(Time.fixedDeltaTime);
    }
    public void RunFSM(float delayRate)
    {
        StartCoroutine(FSMThread(delayRate));
    }
    public float TimeInState()
    {
        return Time.time - transitionedAt;
    }
    protected virtual void OnTransition() { }
    public abstract void Reset();
}
